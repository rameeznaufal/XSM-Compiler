Terminals unused in grammar

    DO
    WHILE


Grammar

    0 $accept: Program $end

    1 Program: ReadStmt MainFunc WriteStmt

    2 WriteStmt: WRITE '(' ARGC ')' ';'

    3 ReadStmt: READ '(' ARGC ')' ';'

    4 MainFunc: ARGC '=' FUN '(' ARGC ')' '{' Stmts '}'

    5 Stmts: Stmts Stmt
    6      | Stmt

    7 Stmt: AssgnStmt
    8     | IfStmt
    9     | IfElseStmt
   10     | RetStmt

   11 AssgnStmt: VAR '=' E ';'

   12 IfStmt: IF '(' E ')' '{' Stmts '}'

   13 IfElseStmt: IF '(' E ')' '{' Stmts '}' ELSE '{' Stmts '}'

   14 RetStmt: RETURN E ';'

   15 E: E ADD E
   16  | E MUL E
   17  | E SUB E
   18  | E DIV E
   19  | E LTE E
   20  | E GT E
   21  | E LT E
   22  | E GTE E
   23  | E EQ E
   24  | E NTE E
   25  | '(' E ')'
   26  | NUM
   27  | VAR
   28  | ARGC
   29  | FUN '(' E ')'


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 2 3 4 12 13 25 29
    ')' (41) 2 3 4 12 13 25 29
    ';' (59) 2 3 11 14
    '=' (61) 4 11
    '{' (123) 4 12 13
    '}' (125) 4 12 13
    error (256)
    FUN (258) 4 29
    IF (259) 12 13
    ELSE (260) 13
    DO (261)
    WHILE (262)
    READ (263) 3
    WRITE (264) 2
    RETURN (265) 14
    ARGC <treenode> (266) 2 3 4 28
    VAR <treenode> (267) 11 27
    NUM <treenode> (268) 26
    ADD (269) 15
    SUB (270) 17
    MUL (271) 16
    DIV (272) 18
    LT (273) 21
    GT (274) 20
    LTE (275) 19
    GTE (276) 22
    EQ (277) 23
    NTE (278) 24


Nonterminals, with rules where they appear

    $accept (30)
        on left: 0
    Program <treenode> (31)
        on left: 1
        on right: 0
    WriteStmt <treenode> (32)
        on left: 2
        on right: 1
    ReadStmt <treenode> (33)
        on left: 3
        on right: 1
    MainFunc <treenode> (34)
        on left: 4
        on right: 1
    Stmts <treenode> (35)
        on left: 5 6
        on right: 4 5 12 13
    Stmt <treenode> (36)
        on left: 7 8 9 10
        on right: 5 6
    AssgnStmt <treenode> (37)
        on left: 11
        on right: 7
    IfStmt <treenode> (38)
        on left: 12
        on right: 8
    IfElseStmt <treenode> (39)
        on left: 13
        on right: 9
    RetStmt <treenode> (40)
        on left: 14
        on right: 10
    E <treenode> (41)
        on left: 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
        on right: 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 29


State 0

    0 $accept: . Program $end

    READ  shift, and go to state 1

    Program   go to state 2
    ReadStmt  go to state 3


State 1

    3 ReadStmt: READ . '(' ARGC ')' ';'

    '('  shift, and go to state 4


State 2

    0 $accept: Program . $end

    $end  shift, and go to state 5


State 3

    1 Program: ReadStmt . MainFunc WriteStmt

    ARGC  shift, and go to state 6

    MainFunc  go to state 7


State 4

    3 ReadStmt: READ '(' . ARGC ')' ';'

    ARGC  shift, and go to state 8


State 5

    0 $accept: Program $end .

    $default  accept


State 6

    4 MainFunc: ARGC . '=' FUN '(' ARGC ')' '{' Stmts '}'

    '='  shift, and go to state 9


State 7

    1 Program: ReadStmt MainFunc . WriteStmt

    WRITE  shift, and go to state 10

    WriteStmt  go to state 11


State 8

    3 ReadStmt: READ '(' ARGC . ')' ';'

    ')'  shift, and go to state 12


State 9

    4 MainFunc: ARGC '=' . FUN '(' ARGC ')' '{' Stmts '}'

    FUN  shift, and go to state 13


State 10

    2 WriteStmt: WRITE . '(' ARGC ')' ';'

    '('  shift, and go to state 14


State 11

    1 Program: ReadStmt MainFunc WriteStmt .

    $default  reduce using rule 1 (Program)


State 12

    3 ReadStmt: READ '(' ARGC ')' . ';'

    ';'  shift, and go to state 15


State 13

    4 MainFunc: ARGC '=' FUN . '(' ARGC ')' '{' Stmts '}'

    '('  shift, and go to state 16


State 14

    2 WriteStmt: WRITE '(' . ARGC ')' ';'

    ARGC  shift, and go to state 17


State 15

    3 ReadStmt: READ '(' ARGC ')' ';' .

    $default  reduce using rule 3 (ReadStmt)


State 16

    4 MainFunc: ARGC '=' FUN '(' . ARGC ')' '{' Stmts '}'

    ARGC  shift, and go to state 18


State 17

    2 WriteStmt: WRITE '(' ARGC . ')' ';'

    ')'  shift, and go to state 19


State 18

    4 MainFunc: ARGC '=' FUN '(' ARGC . ')' '{' Stmts '}'

    ')'  shift, and go to state 20


State 19

    2 WriteStmt: WRITE '(' ARGC ')' . ';'

    ';'  shift, and go to state 21


State 20

    4 MainFunc: ARGC '=' FUN '(' ARGC ')' . '{' Stmts '}'

    '{'  shift, and go to state 22


State 21

    2 WriteStmt: WRITE '(' ARGC ')' ';' .

    $default  reduce using rule 2 (WriteStmt)


State 22

    4 MainFunc: ARGC '=' FUN '(' ARGC ')' '{' . Stmts '}'

    IF      shift, and go to state 23
    RETURN  shift, and go to state 24
    VAR     shift, and go to state 25

    Stmts       go to state 26
    Stmt        go to state 27
    AssgnStmt   go to state 28
    IfStmt      go to state 29
    IfElseStmt  go to state 30
    RetStmt     go to state 31


State 23

   12 IfStmt: IF . '(' E ')' '{' Stmts '}'
   13 IfElseStmt: IF . '(' E ')' '{' Stmts '}' ELSE '{' Stmts '}'

    '('  shift, and go to state 32


State 24

   14 RetStmt: RETURN . E ';'

    FUN   shift, and go to state 33
    ARGC  shift, and go to state 34
    VAR   shift, and go to state 35
    NUM   shift, and go to state 36
    '('   shift, and go to state 37

    E  go to state 38


State 25

   11 AssgnStmt: VAR . '=' E ';'

    '='  shift, and go to state 39


State 26

    4 MainFunc: ARGC '=' FUN '(' ARGC ')' '{' Stmts . '}'
    5 Stmts: Stmts . Stmt

    IF      shift, and go to state 23
    RETURN  shift, and go to state 24
    VAR     shift, and go to state 25
    '}'     shift, and go to state 40

    Stmt        go to state 41
    AssgnStmt   go to state 28
    IfStmt      go to state 29
    IfElseStmt  go to state 30
    RetStmt     go to state 31


State 27

    6 Stmts: Stmt .

    $default  reduce using rule 6 (Stmts)


State 28

    7 Stmt: AssgnStmt .

    $default  reduce using rule 7 (Stmt)


State 29

    8 Stmt: IfStmt .

    $default  reduce using rule 8 (Stmt)


State 30

    9 Stmt: IfElseStmt .

    $default  reduce using rule 9 (Stmt)


State 31

   10 Stmt: RetStmt .

    $default  reduce using rule 10 (Stmt)


State 32

   12 IfStmt: IF '(' . E ')' '{' Stmts '}'
   13 IfElseStmt: IF '(' . E ')' '{' Stmts '}' ELSE '{' Stmts '}'

    FUN   shift, and go to state 33
    ARGC  shift, and go to state 34
    VAR   shift, and go to state 35
    NUM   shift, and go to state 36
    '('   shift, and go to state 37

    E  go to state 42


State 33

   29 E: FUN . '(' E ')'

    '('  shift, and go to state 43


State 34

   28 E: ARGC .

    $default  reduce using rule 28 (E)


State 35

   27 E: VAR .

    $default  reduce using rule 27 (E)


State 36

   26 E: NUM .

    $default  reduce using rule 26 (E)


State 37

   25 E: '(' . E ')'

    FUN   shift, and go to state 33
    ARGC  shift, and go to state 34
    VAR   shift, and go to state 35
    NUM   shift, and go to state 36
    '('   shift, and go to state 37

    E  go to state 44


State 38

   14 RetStmt: RETURN E . ';'
   15 E: E . ADD E
   16  | E . MUL E
   17  | E . SUB E
   18  | E . DIV E
   19  | E . LTE E
   20  | E . GT E
   21  | E . LT E
   22  | E . GTE E
   23  | E . EQ E
   24  | E . NTE E

    ADD  shift, and go to state 45
    SUB  shift, and go to state 46
    MUL  shift, and go to state 47
    DIV  shift, and go to state 48
    LT   shift, and go to state 49
    GT   shift, and go to state 50
    LTE  shift, and go to state 51
    GTE  shift, and go to state 52
    EQ   shift, and go to state 53
    NTE  shift, and go to state 54
    ';'  shift, and go to state 55


State 39

   11 AssgnStmt: VAR '=' . E ';'

    FUN   shift, and go to state 33
    ARGC  shift, and go to state 34
    VAR   shift, and go to state 35
    NUM   shift, and go to state 36
    '('   shift, and go to state 37

    E  go to state 56


State 40

    4 MainFunc: ARGC '=' FUN '(' ARGC ')' '{' Stmts '}' .

    $default  reduce using rule 4 (MainFunc)


State 41

    5 Stmts: Stmts Stmt .

    $default  reduce using rule 5 (Stmts)


State 42

   12 IfStmt: IF '(' E . ')' '{' Stmts '}'
   13 IfElseStmt: IF '(' E . ')' '{' Stmts '}' ELSE '{' Stmts '}'
   15 E: E . ADD E
   16  | E . MUL E
   17  | E . SUB E
   18  | E . DIV E
   19  | E . LTE E
   20  | E . GT E
   21  | E . LT E
   22  | E . GTE E
   23  | E . EQ E
   24  | E . NTE E

    ADD  shift, and go to state 45
    SUB  shift, and go to state 46
    MUL  shift, and go to state 47
    DIV  shift, and go to state 48
    LT   shift, and go to state 49
    GT   shift, and go to state 50
    LTE  shift, and go to state 51
    GTE  shift, and go to state 52
    EQ   shift, and go to state 53
    NTE  shift, and go to state 54
    ')'  shift, and go to state 57


State 43

   29 E: FUN '(' . E ')'

    FUN   shift, and go to state 33
    ARGC  shift, and go to state 34
    VAR   shift, and go to state 35
    NUM   shift, and go to state 36
    '('   shift, and go to state 37

    E  go to state 58


State 44

   15 E: E . ADD E
   16  | E . MUL E
   17  | E . SUB E
   18  | E . DIV E
   19  | E . LTE E
   20  | E . GT E
   21  | E . LT E
   22  | E . GTE E
   23  | E . EQ E
   24  | E . NTE E
   25  | '(' E . ')'

    ADD  shift, and go to state 45
    SUB  shift, and go to state 46
    MUL  shift, and go to state 47
    DIV  shift, and go to state 48
    LT   shift, and go to state 49
    GT   shift, and go to state 50
    LTE  shift, and go to state 51
    GTE  shift, and go to state 52
    EQ   shift, and go to state 53
    NTE  shift, and go to state 54
    ')'  shift, and go to state 59


State 45

   15 E: E ADD . E

    FUN   shift, and go to state 33
    ARGC  shift, and go to state 34
    VAR   shift, and go to state 35
    NUM   shift, and go to state 36
    '('   shift, and go to state 37

    E  go to state 60


State 46

   17 E: E SUB . E

    FUN   shift, and go to state 33
    ARGC  shift, and go to state 34
    VAR   shift, and go to state 35
    NUM   shift, and go to state 36
    '('   shift, and go to state 37

    E  go to state 61


State 47

   16 E: E MUL . E

    FUN   shift, and go to state 33
    ARGC  shift, and go to state 34
    VAR   shift, and go to state 35
    NUM   shift, and go to state 36
    '('   shift, and go to state 37

    E  go to state 62


State 48

   18 E: E DIV . E

    FUN   shift, and go to state 33
    ARGC  shift, and go to state 34
    VAR   shift, and go to state 35
    NUM   shift, and go to state 36
    '('   shift, and go to state 37

    E  go to state 63


State 49

   21 E: E LT . E

    FUN   shift, and go to state 33
    ARGC  shift, and go to state 34
    VAR   shift, and go to state 35
    NUM   shift, and go to state 36
    '('   shift, and go to state 37

    E  go to state 64


State 50

   20 E: E GT . E

    FUN   shift, and go to state 33
    ARGC  shift, and go to state 34
    VAR   shift, and go to state 35
    NUM   shift, and go to state 36
    '('   shift, and go to state 37

    E  go to state 65


State 51

   19 E: E LTE . E

    FUN   shift, and go to state 33
    ARGC  shift, and go to state 34
    VAR   shift, and go to state 35
    NUM   shift, and go to state 36
    '('   shift, and go to state 37

    E  go to state 66


State 52

   22 E: E GTE . E

    FUN   shift, and go to state 33
    ARGC  shift, and go to state 34
    VAR   shift, and go to state 35
    NUM   shift, and go to state 36
    '('   shift, and go to state 37

    E  go to state 67


State 53

   23 E: E EQ . E

    FUN   shift, and go to state 33
    ARGC  shift, and go to state 34
    VAR   shift, and go to state 35
    NUM   shift, and go to state 36
    '('   shift, and go to state 37

    E  go to state 68


State 54

   24 E: E NTE . E

    FUN   shift, and go to state 33
    ARGC  shift, and go to state 34
    VAR   shift, and go to state 35
    NUM   shift, and go to state 36
    '('   shift, and go to state 37

    E  go to state 69


State 55

   14 RetStmt: RETURN E ';' .

    $default  reduce using rule 14 (RetStmt)


State 56

   11 AssgnStmt: VAR '=' E . ';'
   15 E: E . ADD E
   16  | E . MUL E
   17  | E . SUB E
   18  | E . DIV E
   19  | E . LTE E
   20  | E . GT E
   21  | E . LT E
   22  | E . GTE E
   23  | E . EQ E
   24  | E . NTE E

    ADD  shift, and go to state 45
    SUB  shift, and go to state 46
    MUL  shift, and go to state 47
    DIV  shift, and go to state 48
    LT   shift, and go to state 49
    GT   shift, and go to state 50
    LTE  shift, and go to state 51
    GTE  shift, and go to state 52
    EQ   shift, and go to state 53
    NTE  shift, and go to state 54
    ';'  shift, and go to state 70


State 57

   12 IfStmt: IF '(' E ')' . '{' Stmts '}'
   13 IfElseStmt: IF '(' E ')' . '{' Stmts '}' ELSE '{' Stmts '}'

    '{'  shift, and go to state 71


State 58

   15 E: E . ADD E
   16  | E . MUL E
   17  | E . SUB E
   18  | E . DIV E
   19  | E . LTE E
   20  | E . GT E
   21  | E . LT E
   22  | E . GTE E
   23  | E . EQ E
   24  | E . NTE E
   29  | FUN '(' E . ')'

    ADD  shift, and go to state 45
    SUB  shift, and go to state 46
    MUL  shift, and go to state 47
    DIV  shift, and go to state 48
    LT   shift, and go to state 49
    GT   shift, and go to state 50
    LTE  shift, and go to state 51
    GTE  shift, and go to state 52
    EQ   shift, and go to state 53
    NTE  shift, and go to state 54
    ')'  shift, and go to state 72


State 59

   25 E: '(' E ')' .

    $default  reduce using rule 25 (E)


State 60

   15 E: E . ADD E
   15  | E ADD E .
   16  | E . MUL E
   17  | E . SUB E
   18  | E . DIV E
   19  | E . LTE E
   20  | E . GT E
   21  | E . LT E
   22  | E . GTE E
   23  | E . EQ E
   24  | E . NTE E

    MUL  shift, and go to state 47
    DIV  shift, and go to state 48

    $default  reduce using rule 15 (E)


State 61

   15 E: E . ADD E
   16  | E . MUL E
   17  | E . SUB E
   17  | E SUB E .
   18  | E . DIV E
   19  | E . LTE E
   20  | E . GT E
   21  | E . LT E
   22  | E . GTE E
   23  | E . EQ E
   24  | E . NTE E

    MUL  shift, and go to state 47
    DIV  shift, and go to state 48

    $default  reduce using rule 17 (E)


State 62

   15 E: E . ADD E
   16  | E . MUL E
   16  | E MUL E .
   17  | E . SUB E
   18  | E . DIV E
   19  | E . LTE E
   20  | E . GT E
   21  | E . LT E
   22  | E . GTE E
   23  | E . EQ E
   24  | E . NTE E

    $default  reduce using rule 16 (E)


State 63

   15 E: E . ADD E
   16  | E . MUL E
   17  | E . SUB E
   18  | E . DIV E
   18  | E DIV E .
   19  | E . LTE E
   20  | E . GT E
   21  | E . LT E
   22  | E . GTE E
   23  | E . EQ E
   24  | E . NTE E

    $default  reduce using rule 18 (E)


State 64

   15 E: E . ADD E
   16  | E . MUL E
   17  | E . SUB E
   18  | E . DIV E
   19  | E . LTE E
   20  | E . GT E
   21  | E . LT E
   21  | E LT E .
   22  | E . GTE E
   23  | E . EQ E
   24  | E . NTE E

    ADD  shift, and go to state 45
    SUB  shift, and go to state 46
    MUL  shift, and go to state 47
    DIV  shift, and go to state 48

    $default  reduce using rule 21 (E)


State 65

   15 E: E . ADD E
   16  | E . MUL E
   17  | E . SUB E
   18  | E . DIV E
   19  | E . LTE E
   20  | E . GT E
   20  | E GT E .
   21  | E . LT E
   22  | E . GTE E
   23  | E . EQ E
   24  | E . NTE E

    ADD  shift, and go to state 45
    SUB  shift, and go to state 46
    MUL  shift, and go to state 47
    DIV  shift, and go to state 48

    $default  reduce using rule 20 (E)


State 66

   15 E: E . ADD E
   16  | E . MUL E
   17  | E . SUB E
   18  | E . DIV E
   19  | E . LTE E
   19  | E LTE E .
   20  | E . GT E
   21  | E . LT E
   22  | E . GTE E
   23  | E . EQ E
   24  | E . NTE E

    ADD  shift, and go to state 45
    SUB  shift, and go to state 46
    MUL  shift, and go to state 47
    DIV  shift, and go to state 48

    $default  reduce using rule 19 (E)


State 67

   15 E: E . ADD E
   16  | E . MUL E
   17  | E . SUB E
   18  | E . DIV E
   19  | E . LTE E
   20  | E . GT E
   21  | E . LT E
   22  | E . GTE E
   22  | E GTE E .
   23  | E . EQ E
   24  | E . NTE E

    ADD  shift, and go to state 45
    SUB  shift, and go to state 46
    MUL  shift, and go to state 47
    DIV  shift, and go to state 48

    $default  reduce using rule 22 (E)


State 68

   15 E: E . ADD E
   16  | E . MUL E
   17  | E . SUB E
   18  | E . DIV E
   19  | E . LTE E
   20  | E . GT E
   21  | E . LT E
   22  | E . GTE E
   23  | E . EQ E
   23  | E EQ E .
   24  | E . NTE E

    ADD  shift, and go to state 45
    SUB  shift, and go to state 46
    MUL  shift, and go to state 47
    DIV  shift, and go to state 48
    LT   shift, and go to state 49
    GT   shift, and go to state 50
    LTE  shift, and go to state 51
    GTE  shift, and go to state 52

    $default  reduce using rule 23 (E)


State 69

   15 E: E . ADD E
   16  | E . MUL E
   17  | E . SUB E
   18  | E . DIV E
   19  | E . LTE E
   20  | E . GT E
   21  | E . LT E
   22  | E . GTE E
   23  | E . EQ E
   24  | E . NTE E
   24  | E NTE E .

    ADD  shift, and go to state 45
    SUB  shift, and go to state 46
    MUL  shift, and go to state 47
    DIV  shift, and go to state 48
    LT   shift, and go to state 49
    GT   shift, and go to state 50
    LTE  shift, and go to state 51
    GTE  shift, and go to state 52

    $default  reduce using rule 24 (E)


State 70

   11 AssgnStmt: VAR '=' E ';' .

    $default  reduce using rule 11 (AssgnStmt)


State 71

   12 IfStmt: IF '(' E ')' '{' . Stmts '}'
   13 IfElseStmt: IF '(' E ')' '{' . Stmts '}' ELSE '{' Stmts '}'

    IF      shift, and go to state 23
    RETURN  shift, and go to state 24
    VAR     shift, and go to state 25

    Stmts       go to state 73
    Stmt        go to state 27
    AssgnStmt   go to state 28
    IfStmt      go to state 29
    IfElseStmt  go to state 30
    RetStmt     go to state 31


State 72

   29 E: FUN '(' E ')' .

    $default  reduce using rule 29 (E)


State 73

    5 Stmts: Stmts . Stmt
   12 IfStmt: IF '(' E ')' '{' Stmts . '}'
   13 IfElseStmt: IF '(' E ')' '{' Stmts . '}' ELSE '{' Stmts '}'

    IF      shift, and go to state 23
    RETURN  shift, and go to state 24
    VAR     shift, and go to state 25
    '}'     shift, and go to state 74

    Stmt        go to state 41
    AssgnStmt   go to state 28
    IfStmt      go to state 29
    IfElseStmt  go to state 30
    RetStmt     go to state 31


State 74

   12 IfStmt: IF '(' E ')' '{' Stmts '}' .
   13 IfElseStmt: IF '(' E ')' '{' Stmts '}' . ELSE '{' Stmts '}'

    ELSE  shift, and go to state 75

    $default  reduce using rule 12 (IfStmt)


State 75

   13 IfElseStmt: IF '(' E ')' '{' Stmts '}' ELSE . '{' Stmts '}'

    '{'  shift, and go to state 76


State 76

   13 IfElseStmt: IF '(' E ')' '{' Stmts '}' ELSE '{' . Stmts '}'

    IF      shift, and go to state 23
    RETURN  shift, and go to state 24
    VAR     shift, and go to state 25

    Stmts       go to state 77
    Stmt        go to state 27
    AssgnStmt   go to state 28
    IfStmt      go to state 29
    IfElseStmt  go to state 30
    RetStmt     go to state 31


State 77

    5 Stmts: Stmts . Stmt
   13 IfElseStmt: IF '(' E ')' '{' Stmts '}' ELSE '{' Stmts . '}'

    IF      shift, and go to state 23
    RETURN  shift, and go to state 24
    VAR     shift, and go to state 25
    '}'     shift, and go to state 78

    Stmt        go to state 41
    AssgnStmt   go to state 28
    IfStmt      go to state 29
    IfElseStmt  go to state 30
    RetStmt     go to state 31


State 78

   13 IfElseStmt: IF '(' E ')' '{' Stmts '}' ELSE '{' Stmts '}' .

    $default  reduce using rule 13 (IfElseStmt)
